{
  "hash": "46a8ed1fb7499219cd23a96df0180887",
  "result": {
    "markdown": "---\ntitle: \"Portfolio Project 2: Image classification using FastAI\"\nexecute: \n  echo: true\n\nformat:\n  html:\n    page-layout: full\n    theme:\n      light: cosmo\n      dark: [cosmo, theme_dark_custom.scss]\n    code-link: true\n    code-fold: false\nengine: python3\n---\n\n## Goal\nThe purpose of this project is to familiarise myself with the `fastai` python package. I will build a simple cat and dog classifier and then a model that can classify all breeds.\n\n## Step 1.0\nFirst, we need to import the `FastAI` package\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom fastai.vision.all import *\n```\n:::\n\n\nThen we want to dowload a dataset of images - in this case labelled cats and dogs.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npath = untar_data(URLs.PETS)\n```\n:::\n\n\nWhat is inside this dataset?\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npath.ls()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(#2) [Path('/home/gbea0001/.fastai/data/oxford-iiit-pet/annotations'),Path('/home/gbea0001/.fastai/data/oxford-iiit-pet/images')]\n```\n:::\n:::\n\n\nHow many files are in the dataset?\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfiles = get_image_files(path/\"images\")\nlen(files)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n7390\n```\n:::\n:::\n\n\nLet's define an easy label function\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef label_func(f):\n  return f[0].isupper()\n```\n:::\n\n\nGreat! Now we want to stick all of our data into a `DataLoader` object so that we can begin the process of training our model.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndls = ImageDataLoaders.from_name_func(path, files, label_func, item_tfms=Resize(224))\n```\n:::\n\n\nOK, now let's just take a moment to see that the images are all loaded into the `DataLoader` object properly:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndls.show_batch()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\nLooking good! We are now ready to try training a model. We are going to use an old favourite that works quite well while also being quite small - the `ResNet34` model.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}